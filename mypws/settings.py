"""
Django settings for mypws project.

Generated by 'django-admin startproject' using Django 1.11.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'f!m%74zbax86ux)wwrl%gblvlou^3-cmdde1ce5_@tx@j@$c38'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '.pythonanywhere.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'jquery',
    'djangoformsetjs',
    'rest_framework',
    'rest_framework_extensions',
    'svn_permission',
    'release_manifest',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mypws.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['%s/templates/' % (PROJECT_DIR),],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mypws.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'EST'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

LOGIN_REDIRECT_URL = '/'

# Restframework
REST_FRAMEWORK = {
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',
    'DEFAULT_FILTER_BACKENDS': ['url_filter.integrations.drf.DjangoFilterBackend',]
}

"""
import sys, logging
#
# custom formatter to print exception info and text inside of double quotes
# for meeting splunk forwarder parse principle
#
class PwsFormatter(logging.Formatter):
    def __init__(self, default):
        self._fmt = default._fmt
        self.datefmt = default.fmt
    
    def format(self, record):
        #
        Format the specified record as text
        
        The record's .....
        #
        record.message = record.getMessage()
        if self.usersTime():
            record.asctime = self.formatTime(record, self.datefmt)
        s = self._fmt % record.__dict__
        
        if record.exc_info:
            if not record.exc_text:
                record.exc_text = self.formatException(record.exc_info)
                
        if record.exc_text:
            if s[-1:] != "\n":
                s = s + "\n"
            try:
                s = s + record.exc_text
            except UnicodeError:
                s = s + record.exc_text.decode(sys.getfilesystemencoding(),
                                                'replace')
        
        # Before returning formatted string, replace all double quotes in the string
        # then quote the text string to the end including record.exc_text
        s = s.replace('"', '') + '"'
        s = s.replace('text=', 'text="')
        
        return s
        
def PwsFmtFactory(fmt, datefmt):
    default = logging.Formatter(fmt, datefmt)
    return PwsFormatter(default)

LOGGING_DIR = get_env_setting('LOGS_PATH')
LOGGING_MAX_SIZE = 1024 * 1024 * 10 # 10MB
LOGGING_FILE_COUNT = 10
LOGGING_DEFAULT_LEVEL = get_env_setting('LOGGING_DEFAULT_LEVEL', 'DEBUG')
LOGGING_FILE_NAME = get_env_setting('LOGGING_FILE_NAME')

SECURITY_LOGGING_DIR = get_env_setting('SECURITY_LOGGING_DIR')
SECURITY_LOGGING_MAX_SIZE = 1024 * 1024 * 10 # 10MB
SECURITY_LOGGING_FILE_COUNT = 10
SECURITY_LOGGING_DEFAULT_LEVEL = get_env_setting('SECURITY_LOGGING_DEFAULT_LEVEL', 'DEBUG')
SECURITY_LOGGING_FILE_NAME = get_env_setting('SECURITY_LOGGING_FILE_NAME')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False;
    'formatters': {
        'pws_verbose': {
            '()': PwsFmtFactory,
            'format': '%(asctime)s.%(msec)03dZ, leve=%(levelname)s, host=' + os.uname()[1] + ', module=%(module)s, pid=%(process)d, tid=%(thread)d, text=%(message)s[%(exc_info)s]',
            'datefmt': '%Y-%m-%dT%H:%M:%S',
        },
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d, %(thread)d %(message)s',
            'datefmt': '%Y-%m-%dT%H:%M:%S',
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'filters': {
        'requre_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'console': {
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['requre_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'axes_log': {
            'level': 'INFO',
            'class': 'django.utils.log.AdminEmailHandler',
        },
        'django': {
            'level': LOGGING_DEFAULT_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': LOGGING_MAX_SIZE,
            'backupCount': LOGGING_FILE_COUNT,
            'filename': LOGGING_DIR + LOGGING_FILE_NAME,
            'formatter': 'pws_verbose',
        },
        'security': {
            'level': SECURITY_LOGGING_DEFAULT_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': SECURITY_LOGGING_MAX_SIZE,
            'backupCount': SECURITY_LOGGING_FILE_COUNT,
            'filename': SECURITY_LOGGING_DIR + SECURITY_LOGGING_FILE_NAME,
            'formatter': 'pws_verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['mail_admins', 'django'],
            'level': LOGGING_DEFAULT_LEVEL,
            'propagate': True,
        },
        'security': {
            'handlers': ['security'],
            'level': SECURITY_LOGGING_DEFAULT_LEVEL,
            'propagate': True,
        }
    }
}


# LDAP authentication
import ldap
# following is used in the NPAC SA LDAP
from django_auth_ldap.config import LDAPSearch, GroupOfUniqueNamesType
# following is used in the old NPAC LDAP
from django_auth_ldap.config import LDAPSearch, PosixGroupType

# LDAP base configuration
AUTH_LADP_SERVER_URI = 'ldap://localhost:1389'
AUTH_LDAP_BIND_AS_AUTHENTICATING_USER = True
AUTH_LDAP_USER_SEARCH = LDAPSearch("ou=xxx,ou=xxx,dc=xxx,dc=xxx", ldap.SCOPE_SUBTREE, "(uid=%(user)s)")
# following is for LDAPS
AUTH_LDAP_USER_DN_TEMPLATE = "uid=%(user)s,"+get_evn_setting("LDAP_SUBTREE")
AUTH_LDAP_GLOBAL_OPTIONS = {
    ldap.OPT_X_TLS_CACERTFILE: get_env_setting("LDAP_CERT_FILE")
}

# populate the Django local user list from the LDAP directory
AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail"
}

# map the Django user with permission from the LDAP app group
AUTH_LDAP_GROUP_SEARCH = LDAPSearch("ou=xxx,ou=xxx,dc=xxx,dc=xxx", ldap.SCOPE_SUBTREE, "(objectClass=groupOfUniqueNames)")
AUTH_LDAP_GROUP_TYPE = GroupOfUniqueNamesType(name_attr="cn")

# set Django 'is_staff' flag
AUTH_LDAP_USER_FLAG_BY_GROUP = {
    "is_staff": ["cn=Requester,ou=Papriqa,ou=BuildGroups,ou=Build,ou=unix,dc=npac,dc=ics,dc=iconectiv,dc=com",
                 "cn=Inventory_user,ou=Papriqa,ou=BuildGroups,ou=Build,ou=unix,dc=npac,dc=ics,dc=iconectiv,dc=com"]
}

# Cache ldap group setting for 10 minutes to minimize LDAP traffic
AUTH_LDAP_CACHE_GROUPS = True
AUTH_LDAP_GROUP_CACHE_TIMEOUT = 1800

# use LDAP group membership to define group permission
AUTH_LDAP_FIND_GROUP_PERMS = True
AUTH_LDAP_MIRROR_GROUPS = True

# Keep ModelBackend for per-user permissions and maybe a local superuser
AUTHENTICATION_BACKENDS = (
    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend'
)

"""
